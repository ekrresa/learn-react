{"version":3,"sources":["components/table.jsx","components/form.jsx","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","characterList","characters","map","character","index","key","name","job","onClick","onDelete","className","Table","table_TableHeader","table_TableBody","this","characterData","Component","Form","initialState","state","_this","handleChange","event","_event$target","target","value","setState","Object","defineProperty","submitForm","_this$state","onSubmit","_this$state2","type","placeholder","onChange","App","handleDelete","newCharacters","filter","c","i","handleSubmit","push","table","components_form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8e2dfe8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nconst TableHeader = () => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Job</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nconst TableBody = props => {\r\n  let characterList = props.characters.map((character, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{character.name}</td>\r\n        <td>{character.job}</td>\r\n        <td onClick={() => props.onDelete(index)} className=\"btn btn-danger\">\r\n          DELETE\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return <tbody>{characterList}</tbody>;\r\n};\r\n\r\nclass Table extends Component {\r\n  render() {\r\n    return (\r\n      <table>\r\n        <TableHeader />\r\n        <TableBody\r\n          characters={this.props.characterData}\r\n          onDelete={this.props.onDelete}\r\n        />\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Form extends Component {\r\n  initialState = {\r\n    name: \"\",\r\n    job: \"\"\r\n  };\r\n\r\n  state = this.initialState;\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  submitForm = () => {\r\n    const { name, job } = this.state;\r\n\r\n    this.props.onSubmit(name, job);\r\n    this.setState(this.initialState);\r\n  };\r\n\r\n  render() {\r\n    let { name, job } = this.state;\r\n\r\n    return (\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Name\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={this.handleChange}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter Job title\"\r\n          name=\"job\"\r\n          value={job}\r\n          onChange={this.handleChange}\r\n        />\r\n        <input\r\n          onClick={this.submitForm}\r\n          className=\"btn btn-primary\"\r\n          type=\"button\"\r\n          value=\"SUBMIT\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Table from \"./components/table\";\nimport Form from \"./components/form\";\n\nclass App extends Component {\n  state = {\n    characters: [\n      {\n        name: \"Charlie\",\n        job: \"Janitor\"\n      },\n      {\n        name: \"Mac\",\n        job: \"Bouncer\"\n      },\n      {\n        name: \"Dee\",\n        job: \"Aspring actress\"\n      },\n      {\n        name: \"Dennis\",\n        job: \"Bartender\"\n      },\n      {\n        name: \"Chukky\",\n        job: \"Director\"\n      }\n    ]\n  };\n\n  handleDelete = index => {\n    const newCharacters = this.state.characters.filter((c, i) => {\n      return i !== index;\n    });\n\n    this.setState({ characters: newCharacters });\n  };\n\n  handleSubmit = (name, job) => {\n    const { characters } = this.state;\n    characters.push({ name: name, job: job });\n    this.setState({ characters: characters });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Table\n          characterData={this.state.characters}\n          onDelete={this.handleDelete}\n        />\n        <Form onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}